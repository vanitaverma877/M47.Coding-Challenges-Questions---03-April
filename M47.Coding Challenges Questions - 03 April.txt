

M47.Coding Challenges Questions - 03 April

#Coding Challenges Assignment Questions

....................................................................

Q1.Write a function called "addNumbers)" that takes two numbers as arguments 
and returns their sum. call the function before it is declared to demonstrate 
hoisting.

Q2.Write a function called "multiplyNumbers" that takes two numbers as 
arguments and returns their product. use function expressions to define 
the function and call the function before it is declared to demonstrate
hoisting.

Q3.Write a function that takes two numbers as arguments and returns their sum. 
Declare a variable inside the function using the var keyword and log its 
value to the console before it is assigned a value to demonstrate variable 
hoisting.

Q4.Declare three variables, one using let, one using var, and one using const, 
all inside a block scope. Assign them values and log their values to the 
console before and after they are declared to demonstrate variable hoisting.

Q5.Declare a variable using let inside a block scope and attempt to log its 
value to the console before it is assigned a value to demonstrate the temporal 
dead zone.

............................................................................

Q1.Write a function called "addNumbers)" that takes two numbers as arguments 
and returns their sum. call the function before it is declared to demonstrate 
hoisting.

A.In JavaScript, function declarations are hoisted to the top of their scope, which means you can call the function before it's actually defined in the code. Here's how you can demonstrate this with a function called `addNumbers`:

### Implementation:

```javascript
// Calling the function before it's declared to demonstrate hoisting
console.log(addNumbers(5, 10)); // Output: 15

// Function declaration
function addNumbers(num1, num2) {
    return num1 + num2;
}
```

### Explanation:

1. **Calling the Function Before Declaration**:
   - The function `addNumbers(5, 10)` is called before the function is declared in the code. Due to hoisting, this works perfectly in JavaScript.

2. **Function Declaration**:
   - The function `addNumbers` is declared using the `function` keyword, which is hoisted to the top of its scope during the compile phase.

### Output:

When you run this code, it will output:

```
15
```

This demonstrates that the function `addNumbers` is hoisted, allowing it to be called before its actual declaration in the code.

............................................................................

Q2.Write a function called "multiplyNumbers" that takes two numbers as 
arguments and returns their product. use function expressions to define 
the function and call the function before it is declared to demonstrate
hoisting.

A.In JavaScript, function expressions are not hoisted in the same way as function declarations. This means that if you try to call a function expression before it's defined, you'll get an error. Here's how you can demonstrate this with a function called `multiplyNumbers`:

### Implementation:

```javascript
// Attempt to call the function before it's defined
try {
    console.log(multiplyNumbers(5, 10)); // This will throw an error
} catch (error) {
    console.error("Error:", error.message); // Output: Error: Cannot access 'multiplyNumbers' before initialization
}

// Function expression
const multiplyNumbers = function(num1, num2) {
    return num1 * num2;
};

// Call the function after it's defined
console.log(multiplyNumbers(5, 10)); // Output: 50
```

### Explanation:

1. **Calling the Function Before Declaration**:
   - We attempt to call the `multiplyNumbers(5, 10)` function before it's defined. Since `multiplyNumbers` is defined as a function expression, it is not hoisted, and JavaScript will throw a `ReferenceError`.

2. **Function Expression**:
   - The function `multiplyNumbers` is defined using a function expression with the syntax `const multiplyNumbers = function(num1, num2) { ... };`.

3. **Error Handling**:
   - The `try...catch` block is used to catch the error when trying to call the function before it's defined. This prevents the script from crashing and logs the error message to the console.

4. **Calling the Function After Declaration**:
   - The function is successfully called after it's defined, demonstrating that function expressions must be defined before they are used.

### Output:

When you run this code, it will output:

```
Error: Cannot access 'multiplyNumbers' before initialization
50
```

This demonstrates that function expressions are not hoisted, and you cannot call them before they are defined.

............................................................................

Q3.Write a function that takes two numbers as arguments and returns their sum. 
Declare a variable inside the function using the var keyword and log its 
value to the console before it is assigned a value to demonstrate variable 
hoisting.

A.In JavaScript, variable declarations using the `var` keyword are hoisted to the top of their function scope, but their assignments are not. This means that if you try to access a `var` variable before it's assigned a value, you'll get `undefined`.

Here's how you can demonstrate this with a function that returns the sum of two numbers:

### Implementation:

```javascript
function addNumbers(num1, num2) {
    console.log(sum); // Output: undefined (due to hoisting)

    var sum = num1 + num2;
    return sum;
}

console.log(addNumbers(5, 10)); // Output: 15
```

### Explanation:

1. **Variable Hoisting**:
   - In the function `addNumbers`, the variable `sum` is declared using the `var` keyword.
   - The declaration of `var sum;` is hoisted to the top of the function scope, but the assignment `sum = num1 + num2;` is not.

2. **Logging the Variable Before Assignment**:
   - When `console.log(sum);` is executed, it logs `undefined` because `sum` is hoisted but not yet assigned a value.
   - After logging `sum`, the variable is then assigned the value `num1 + num2`.

3. **Function Call**:
   - The function is then called with the arguments `5` and `10`, and it returns their sum, which is `15`.

### Output:

When you run this code, the output will be:

```
undefined
15
```

This demonstrates that the variable `sum` is hoisted to the top of the function, but its value is `undefined` until it is explicitly assigned later in the function.

............................................................................

Q4.Declare three variables, one using let, one using var, and one using const, 
all inside a block scope. Assign them values and log their values to the 
console before and after they are declared to demonstrate variable hoisting.

A.To demonstrate variable hoisting with `let`, `var`, and `const`, we need to understand the scoping and hoisting rules for these keywords:

- **`var`**: Variable declarations are hoisted to the top of their function or global scope, but the initialization is not. This means the variable will be `undefined` if accessed before its declaration.
- **`let`**: Variable declarations are hoisted but not initialized. They are in a "temporal dead zone" from the start of the block until the declaration is encountered, so accessing them before the declaration will result in a ReferenceError.
- **`const`**: Similar to `let`, variable declarations are hoisted but not initialized. They also have a "temporal dead zone," and accessing them before the declaration will result in a ReferenceError. Additionally, `const` variables must be initialized when they are declared.

Here's an example of how to demonstrate these concepts:

```javascript
{
    // Block scope
    console.log(varVariable); // Output: undefined (due to hoisting)
    // console.log(letVariable); // Uncaught ReferenceError: Cannot access 'letVariable' before initialization
    // console.log(constVariable); // Uncaught ReferenceError: Cannot access 'constVariable' before initialization

    var varVariable = 'I am a var variable';
    let letVariable = 'I am a let variable';
    const constVariable = 'I am a const variable';

    console.log(varVariable); // Output: I am a var variable
    console.log(letVariable); // Output: I am a let variable
    console.log(constVariable); // Output: I am a const variable
}
```

### Explanation:

1. **Block Scope**:
   - The block `{ ... }` is used to create a local scope.

2. **Accessing Variables Before Declaration**:
   - **`var`**: You can access `varVariable` before its declaration, and it will log `undefined` due to hoisting.
   - **`let`**: Accessing `letVariable` before its declaration will throw a `ReferenceError` because it's in the "temporal dead zone."
   - **`const`**: Accessing `constVariable` before its declaration will also throw a `ReferenceError` for the same reason as `let`.

3. **Logging After Declaration**:
   - After the variables are declared and initialized, logging them will show their assigned values.

### Output:

```
undefined
// ReferenceError: Cannot access 'letVariable' before initialization
// ReferenceError: Cannot access 'constVariable' before initialization

I am a var variable
I am a let variable
I am a const variable
```

This demonstrates how `var`, `let`, and `const` are hoisted differently and how accessing them before their declaration behaves.

............................................................................

Q5.Declare a variable using let inside a block scope and attempt to log its 
value to the console before it is assigned a value to demonstrate the temporal 
dead zone.

A.To demonstrate the "temporal dead zone" (TDZ) with a variable declared using `let`, you need to access the variable before its declaration within a block scope. Here's how you can do it:

```javascript
{
    // Block scope
    // Attempt to log the variable before it is declared
    // This will throw a ReferenceError due to the temporal dead zone
    console.log(myVariable); // Uncaught ReferenceError: Cannot access 'myVariable' before initialization

    // Variable declaration and assignment
    let myVariable = 'I am a variable declared with let';

    // Logging the variable after it is declared
    console.log(myVariable); // Output: I am a variable declared with let
}
```

### Explanation:

1. **Block Scope**:
   - The block `{ ... }` creates a local scope.

2. **Temporal Dead Zone (TDZ)**:
   - When a `let` (or `const`) variable is declared, it is in a "temporal dead zone" from the start of the block until the declaration is encountered.
   - Accessing the variable before the declaration will result in a `ReferenceError`.

3. **Logging After Declaration**:
   - Once the variable is declared and assigned, it can be accessed normally within its scope.

### Expected Output:

```
Uncaught ReferenceError: Cannot access 'myVariable' before initialization
```
After this error, if you log `myVariable` after the declaration, you will get:

```
I am a variable declared with let
```

This demonstrates the TDZ, showing that accessing the `let` variable before its declaration results in an error.

............................................................................





















